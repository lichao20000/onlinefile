<?php
/**
 *
 * ProxyMysql
 * @author cheguoli
 *
 */
class ProxyMysql extends AgentProxyAbstract
{
  /**
   *
   * Mysql服务名称
   * @var const
   */
  const MYSQL_SERVICE_NAME = 'mysqlservice';

  /**
   *
   * 构造函数
   * @param array $appInfo
   * @return void
   */
  public function __construct(array $appInfo) {
    parent::__construct($appInfo);
  }


  /**
  *
  * 查询:只针对于select操作
  * @param string $sql
  * @return mixed
  * @see java public String query(String appId, String authToken, String jsonQuery)
  * 说明：jsonQuery的keys：sql
  *	@GET
    @Path("query/{appId}/{authToken}/{jsonData}")
    @Produces("text/plain")
  */
  public function query($sql) {
    $urlParam = array($this->getAppId(), $this->getAppToken());
    array_unshift($urlParam, 'query');
    $url = implode('/', $urlParam);
    //liqiubo 20140610 原来调用的是eipmock中的服务，屏蔽掉，不让其调用了，直接返回原eipmock中返回的值
    return "";
//     return $this->post(self::MYSQL_SERVICE_NAME, $url,$sql , "application/json");
  }

  /**
  *
  * DML操作
  * 包括数据的增删改和数据表的操作
  * @param string $sql
  * @return boolean
  * @see java public String operator(String appId, String authToken, String jsonQuery)
  * 说明：jsonQuery的keys：sql
  * @GET
    @Path("operator/{appId}/{authToken}")
    @Produces("text/plain")
  */
  public function execute($sql) {
    $urlParam = array($this->getAppId(), $this->getAppToken());
    array_unshift($urlParam, 'operator');
    $url = implode('/', $urlParam);
    //liqiubo 20140610 原来调用的是eipmock中的服务，屏蔽掉，不让其调用了，直接返回原eipmock中返回的值
//     return $this->post(self::MYSQL_SERVICE_NAME, $url, $sql , "application/json");
    return "success";
  }

  public function fetchRow($sql) {
    $result = $this->fetchAll($sql);
    return is_array($result) ? reset($result) : $result;
  }

  public function fetchField($sql) {
    $result = $this->fetchRow($sql);
    $arr = (array) $result;

    return reset($arr);
  }

  public function fetchCol($sql) {
    $result = $this->fetchAll($sql);
    $arrs = array();
    if (is_array($result)) {
      foreach ($result as $value) {
        $arr = (array) $value;
        $arrs[] = reset($arr);
      }
    }
    return $arrs;
  }

  public function fetchAll($sql)
  {
    return $this->query($sql);
  }

  public function transBegin()
  {
    return true;
  }

  public function transCommit()
  {
    return true;
  }

  public function transRollback()
  {
    return true;
  }

  /**
   * 批量写入数据
   * @param string $sql
   *
   * @POST
   * @Path("insertautogenerated/{appId}/{authToken}")
   * @Produces(MediaType.APPLICATION_JSON + ";chartset=UTF-8")
   * public String[] insertAutoGenerated(@PathParam("appId") String appId,
    		                           @PathParam("authToken") String authToken,
    		                           String[] sqls);
   */
  public function insert($sql) {
    $urlParam = array($this->getAppId(), $this->getAppToken());
    array_unshift($urlParam, 'insertautogenerated');
    $data = array($sql);
    $url = implode('/', $urlParam);
    return $this->post(self::MYSQL_SERVICE_NAME, $url, json_encode($data) , "application/json");
  }

  /**
   *
   * @param array $sql
   *
   * @POST
   * @Path("insertautogenerated/{appId}/{authToken}")
   * @Produces(MediaType.APPLICATION_JSON + ";chartset=UTF-8")
   * public String[] insertAutoGenerated(@PathParam("appId") String appId,
    		                           @PathParam("authToken") String authToken,
    		                           String[] sqls);
   */
  public function batchInsert(array $sql) {
  	$urlParam = array($this->getAppId(), $this->getAppToken());
  	array_unshift($urlParam, 'insertautogenerated');
  	$url = implode('/', $urlParam);
  	return $this->post(self::MYSQL_SERVICE_NAME, $url, json_encode($sql) , "application/json");
  }



  /**
   * 批量查询数据
   * @param string $sql
   *
   * @POST
   * @Path("batchquery/{appId}/{authToken}")
   * @Produces(MediaType.APPLICATION_JSON+ ";chartset=UTF-8")
   * public String batchQuery(@PathParam("appId") String appId,
    		                 @PathParam("authToken") String authToken,
    		                 String[] sqls) ;
   */
  public function batchQuery(array $sql) {
  	$urlParam = array($this->getAppId(), $this->getAppToken());
  	array_unshift($urlParam, 'batchquery');
  	$url = implode('/', $urlParam);
  	//liqiubo 20140610 原来调用的是eipmock中的服务，屏蔽掉，不让其调用了，直接返回原eipmock中返回的值
//   	return $this->post(self::MYSQL_SERVICE_NAME, $url, json_encode($sql) , "application/json");
  	return "";
  }

  /**
   * 批量操作数据
   * @param string $sql
   *
   * @POST
   * @Path("batchexcute/{appId}/{authToken}")
   * @Produces(MediaType.TEXT_PLAIN + ";chartset=UTF-8")
   * public String batchExcute(@PathParam("appId") String appId,
    		                  @PathParam("authToken") String authToken,
    		                  String[] sqls);
   */
  public function batchExecute(array $sql) {
  	$urlParam = array($this->getAppId(), $this->getAppToken());
  	array_unshift($urlParam, 'batchexcute');
  	$url = implode('/', $urlParam);
  	//liqiubo 20140610 原来调用的是eipmock中的服务，屏蔽掉，不让其调用了，直接返回原eipmock中返回的值
//   	return $this->post(self::MYSQL_SERVICE_NAME, $url, json_encode($sql) , "application/json");
  	return "success";
  }

  public function escape($string)
  {
    return mysql_escape_string($string);
  }
}
