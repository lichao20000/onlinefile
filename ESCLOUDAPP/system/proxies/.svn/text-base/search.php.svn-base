<?php
class ProxySearch extends AgentProxyAbstract {
  //protected $_baseUrl = 'http://16.187.126.168:8888/aop/rest/searchService';
	/**
	 *
	 * 服务名称
	 * @var const
	 */
	const SEARCH_SERVICE_NAME = 'searchservice';

	static private $_query;
	static private $_searched = FALSE;
	static $_response = NULL;

	public function __construct($appInfo) {
		parent::__construct($appInfo);
	}

	private function _isSearched($searched = NULL) {
		if (is_bool($searched)) {
			self::$_searched = $searched;
		}
		return self::$_searched;
	}

	private function _searchResponseCache($response = NULL) {
		if (is_object($response)) {
			self::$_response = clone $response;
		}
		return self::$_response;
	}

	private function _prepareParam($function){
		$urlParam = array($this->getAppId(), $this->getAppToken());
		array_unshift($urlParam, $function);
		return $urlParam;
	}

	private function _prepareIndexParam($function){
		global  $user;
		$urlParam = array($this->getAppId(), $this->getAppToken(), $user->id);
		array_unshift($urlParam, $function);
		return $urlParam;
	}

	private function _documentID($app, $id){
		return $app . '/' . $id;
	}

	private function _siteHash() {
		global $basePath;
		$hash = substr(base_convert(sha1(uniqid($basePath, TRUE)), 16, 36), 0, 6);
		return $hash;
	}

	/**
	 * Convert date from timestamp into ISO 8601 format.
	 * http://lucene.apache.org/solr/api/org/apache/solr/schema/DateField.html
	 */
	private function _dateISO($date_timestamp) {
		return gmdate('Y-m-d\TH:i:s\Z', $date_timestamp);
	}

	private function _cleanText($text) {
		// Add spaces before stripping tags to avoid running words together.
		//$text = filter_xss(str_replace(array('<', '>'), array(' <', '> '), $text), array());
		// Decode entities and then make safe any < or > characters.
		return htmlspecialchars(html_entity_decode($text, ENT_QUOTES, 'UTF-8'), ENT_QUOTES, 'UTF-8');
	}

	private function _addTagsToDocument($document, $text){
		$tags_to_index = array(
	    'h1' => 'tags_h1',
	    'h2' => 'tags_h2_h3',
	    'h3' => 'tags_h2_h3',
	    'h4' => 'tags_h4_h5_h6',
	    'h5' => 'tags_h4_h5_h6',
	    'h6' => 'tags_h4_h5_h6',
	    'u' => 'tags_inline',
	    'b' => 'tags_inline',
	    'i' => 'tags_inline',
	    'strong' => 'tags_inline',
	    'em' => 'tags_inline',
	    'a' => 'tags_a',
		);
		// Strip off all ignored tags.
		$text = strip_tags($text, '<' . implode('><', array_keys($tags_to_index)) . '>');

		preg_match_all('@<(' . implode('|', array_keys($tags_to_index)) . ')[^>]*>(.*)</\1>@Ui', $text, $matches);
		foreach ($matches[1] as $key => $tag) {
			$tag = strtolower($tag);
			// We don't want to index links auto-generated by the url filter.
			if ($tag != 'a' || !preg_match('@(?:http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://|www\.)[a-zA-Z0-9]+@', $matches[2][$key])) {
				if (!isset($document[$tags_to_index[$tag]])) {
					$document[$tags_to_index[$tag]] = '';
				}
				$document[$tags_to_index[$tag]] .= ' ' . $this->_cleanText($matches[2][$key]);
			}
		}
	}

	private function _buildQueryString($keys, $page = 0){
		$p = new QueryParams();
		$p->setKeys($keys, $page);
		return $p->getQueryString();
	}


	private function _content2IndexDocument($content){
		$document = array();
		//$document['id'] = $this->_documentID($this->getAppId(), $content->id);
		$document['site'] = url(NULL, array('absolute' => TRUE));
		$document['hash'] = $this->_siteHash();
		$document['entity_type'] = $this->getAppId();
		$document['entity_id'] = $content->id;
		$document['bundle'] = $content->type;
		$document['bundle_name'] = $content->typename;
		$document['label'] = $this->_cleanText($content->title);
		$path = isset($content->path)?$content->path:'path';
		$document['url'] = $content->url;
		$document['path'] = $path;
		$document['content'] = $this->_cleanText($content->content);
		if (isset($content->teaser)) {
			$document['teaser'] = $this->_cleanText($content->teaser);
		}
		else {
			$document['teaser'] = truncate_utf8($document['content'], 300, TRUE);
		}
		$document['ss_name'] = isset($content->name)?$content->name:'';
		$document['created_name'] = isset($content->name)?$content->name:'';
		// We want the name to ale be searchable for keywords.
		$document['tos_name'] = isset($content->name)?$content->name:'';

		// Everything else uses dynamic fields
		$document['ss_uid'] = isset($content->uid) ? $content->uid : '';
		$document['bs_status'] = isset($content->bs_status) ? $content->bs_status : 1;
		$document['is_tnid'] = isset($content->tnid) ? $content->tnid : 1;
		$document['bs_translate'] = $content->translate;
		if (empty($content->language)) {
			$document['ss_language'] = '';
		}
		else {
			$document['ss_language'] = $content->language;
		}
		if(!isset($content->created))$content->created = REQUEST_TIME;
		if(!isset($content->changed))$content->changed = REQUEST_TIME;
		$document['ds_created'] = $this->_dateISO($content->created);
		$document['ds_changed'] = $this->_dateISO($content->changed);
		if (isset($content->last_comment_timestamp) && !empty($content->comment_count)) {
			$document['ds_last_comment_timestamp'] = $this->_dateISO($content->last_comment_timestamp);
			$document['ds_last_comment_or_change'] = $this->_dateISO(max($content->last_comment_timestamp, $content->changed));
		}
		else {
			$document['ds_last_comment_or_change'] = $this->_dateISO($content->changed);
		}
		$document['is_comment_count'] = isset($content->comment_count) ? $content->comment_count : 0;
		//$this->_addTagsToDocument($document, $text);

	  if (isset($content->exp_date)) {
		  $document['exp_date'] = strval($content->exp_date);
		}
	  if (isset($content->taxonomy_names)) {
		  $document['taxonomy_names'] = $content->taxonomy_names;
		}
		if (isset($content->access_role)) {
		  $document['access_role'] = $content->access_role;
		}
		if (isset($content->access_uid)) {
		  $document['access_uid'] = $content->access_uid;
		}
		if (isset($content->access_org)) {
		  $document['access_org'] = $content->access_org;
		}
		$contentarray = (array)$content;
		foreach($contentarray as $key => $value){
			if ( substr($key, 0, 3) == 'ss_' ){
				$document[$key] = $value;
			}
			if ( substr($key, 0, 3) == 'sm_' ){
			  $document[$key] = $value;
			}
			if ( substr($key, 0, 3) == 'is_' ){
			  $document[$key] = $value;
			}			
		}
    if(isset($content->tags)){
      //echo $content->tags;
      $document['tags'] = $content->tags;
    }
		return $document;
	}

	/**
	 *
	 * Create document index into solr server.
	 * @param array $documentlist
	 * @return return_type
	 * @GET
	 * @Path("add/{authId}/{authToken}")
	 */
	public function index($documentlist) {
		$urlParam = $this->_prepareParam('add');
		$url = implode('/', $urlParam);
		$ds = array();
		foreach($documentlist as $doc){
			$ds[] = json_encode($this->_content2IndexDocument($doc));
		}
		$result = $this->post(self::SEARCH_SERVICE_NAME, $url, json_encode($ds), 'application/json');
		return $result;
	}

	public function spellcheck($key) {
	  if($key == ''){return false;}
	   
		$urlParam = $this->_prepareParam('spellcheck');
		$urlParam[] = urlencode($key);
		$url = implode('/', $urlParam);
		$result = $this->get(self::SEARCH_SERVICE_NAME, $url, null, 'application/json;charset=UTF-8');
		if (is_string($result)){
		  $responses = json_decode($result);
		  $responses = (array)$responses;
		  if(isset($responses[0])){
		   return (array)$responses[0];
		  }
		  return false;
		}else{
			$response = false;
		}
		return $response;
	}
	
	
	/**
	 * Query by key word.
	 * @param string $queryString
	 */
	                //searchKeys($keywords,$condition, 0, $page - 1 ,PERPAGE, $fq, $fqTags);
	public function searchKeys($keys,$conditions = array(), $start =0, $page = 0, $rowcount = 15, $fq= array(), $fqTags = array(), $faceQuery = array())
	{
    //print_r(func_get_args());
		return $this->search($keys,$conditions, $start, $page, $rowcount, $fq, $fqTags, $faceQuery);
	}

	/**
	 * Query by key word.
	 * @param string $queryString
	 * @GET
    @Path("query/{authId}/{authToken}/{userId}")
    @Produces(MediaType.TEXT_PLAIN + ";charset=UTF-8")
    public String query(@PathParam("authId") String authId,
                        @PathParam("authToken") String authToken,
                        @PathParam("userId") String userId,
                        @QueryParam("condition") String condition, @QueryParam("page") int page,
                        @QueryParam("rowcount") int rowcount, 
                        @QueryParam("fq") String fq,
                        @QueryParam("fqTags") String fqTags, 
                        @QueryParam("tags") String tags,
                        @QueryParam("facetQuery") String facetQuery);                                    
	 */
	public function search($queryString,$conditions, $start =0, $page = 0, $rowcount = 15, $fq= array(), $fqTags=array(), $faceQuery = array())
	{

		$urlParam = $this->_prepareIndexParam('query');
		$url = implode('/', $urlParam);
		$url .="?start=$start&page=$page&rowcount=$rowcount";
		
		
		//组装参数
		$queryString = urlencode($queryString);
		if(is_array($conditions) && count($conditions)>0){
		  foreach($conditions as $k=>$v) {
		    if (!$v) {
		      continue;
		    }
		    $queryString.=urlencode(' ').'+'.urlencode(' ').$k.':'.urlencode($v);
		  }
		}
		if ($queryString && $queryString[0] == '+') {
		  $queryString = substr($queryString, 1);
		}
		if ($queryString!='') {
		  $url .= '&condition='.$queryString;
		}

		$fqCondition = '';
		if (count($fq)>0) {
		  //处理bundle_name
		  foreach ($fq as $key => $val) {
		    if($key=='from'){
  		    $fqCondition .= 'c_bundle_name:' . $val . ' AND ';
		    } else {
		      $fqCondition .= "$key:" . $val . ' AND ';
		    }
		  }
		  $fqCondition = substr($fqCondition, 0, strlen($fqCondition)-5);
		}
		if($fqCondition!=''){
		  $url .= '&fq=' . urlencode($fqCondition);
		}
		
		
		//fqTags={!tag=mytag}bundle_name:aaa&tags=mytab
		//fqTags={!tag=mytag}bundle_name:aaa,{!tag=e}entity_type:np020&tags=mytab,e
		$fqTagsCondition = '';
		$tagsCondition = '';
		if(count($fqTags) > 0){
  		foreach ($fqTags as $key => $val) {
  		  $fqTagsCondition .= "{!tag=$key}$key:$val,";
  		  $tagsCondition .= "$key,";
  		}
  		$fqTagsCondition = substr($fqTagsCondition, 0, strlen($fqTagsCondition)-1);
  		$tagsCondition = substr($tagsCondition, 0, strlen($tagsCondition)-1);
		}
		if ($fqTagsCondition!='') {
		  $url .= '&fqTags='.urlencode($fqTagsCondition);
		}
		if ($tagsCondition!='') {
		  $url .= '&tags='.$tagsCondition;
		}
		
		
    $faceQueryCondition = '';
    if(count($faceQuery)>0){
      $index = 0;
      foreach ($faceQuery as $key => $val) {
        $faceQueryCondition .= "$key:".urlencode($val);
        $index++;
        if ($index<count($faceQuery)) {
          $faceQueryCondition .= ' AND ';
        }
      }
    }

    if($faceQueryCondition!=''){
      $url .= '&faceQuery='.$faceQueryCondition;
    }
    //echo $url.'-------------------------';
		/* $response =  $this->get(self::SEARCH_SERVICE_NAME, $url,
			array($queryString, $start, $page, $rowcount, $fq ), 'application/json' ); */
    $response =  $this->get(self::SEARCH_SERVICE_NAME, $url);
 
		if(empty($response)) return array();
		AopCore::loadLibrary('searchlib');
		if (is_string($response)){
		  $response = json_decode($response);
		}
    //print_r($response);exit;
		SearchLib::searchResponse($response);
    return SearchLib::getResponse();
	}
	//@todo Delete cannot provid.
	
  /**
   * 删除索引
   * @param array $ids
   * 
   * @POST
   * @Path("removeByIds/{authId}/{authToken}")
     @Produces(MediaType.TEXT_PLAIN + ";charset=UTF-8")
     public void removeByIds(@PathParam("authId") String authId,
                            @PathParam("authToken") String authToken, List<String> ids);
   */
	public function removeByIds(array $ids){
	  $urlParam = array($this->getAppId(), $this->getAppToken());
	  array_unshift($urlParam, 'removeByIds');
	  $url = implode('/', $urlParam);
	  return $this->post(self::SEARCH_SERVICE_NAME, $url, json_encode($ids), 'application/json');
	}

}


class QueryParams{
	private $_params = array();
	private function _buildDefault(){
		$this->_params = array(
     	'start' => 0,
      'rows' => 10,
      'q' => '',
      'fl' => 'id,entity_id,entity_type,bundle,bundle_name,content,label,is_comment_count,ds_created,ds_changed,score,path,url,is_uid,tos_name',
      'qf' => array('taxonomy_names%5E2.0','label%5E5.0','content%5E40',
      	'tos_name%5E3.0','tags_inline%5E1.0','tos_content_extra%5E0.1',),
      'qt' => 'standard',
      'hl.fl' => 'content',
      'spellcheck.q' => '',
      'spellcheck' => 'true',
      'facet' => 'true',
      'facet.mincount' => '1',
		//'facet.field' => 'bundle_name',
		//'f.bundle.facet.limit' => '50'
		);

	}

	public function setKeys($keys , $page = 0){
		$this->_buildDefault();
		$this->_params['start'] = $this->_params['rows'] * $page;
		$this->_params['q'] = $keys;
	}

	public function getQueryString(){
		$result = "{'vals':{" ;
		foreach ($this->_params as $key => $param){
			$item = "'" . $key . "':";
			if (is_array($param)){
				$r1 = '';
				foreach ($param as $s){
					$r1 .= $item . "['" . $s . "'],";
				}
			}else{
				$r1 = $item .  "['" . $param . "'],";
			}
			$result .= $r1;
		}
		if (strlen($result)> 0){
			$result = substr($result, 0, strlen($result)-1);
		}
		$result .= '}}';
		return $result;
	}
}